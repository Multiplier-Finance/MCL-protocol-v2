/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { ATokenMock } from "../ATokenMock";

export class ATokenMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(aic: string, overrides?: Overrides): Promise<ATokenMock> {
    return super.deploy(aic, overrides || {}) as Promise<ATokenMock>;
  }
  getDeployTransaction(aic: string, overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(aic, overrides || {});
  }
  attach(address: string): ATokenMock {
    return super.attach(address) as ATokenMock;
  }
  connect(signer: Signer): ATokenMock__factory {
    return super.connect(signer) as ATokenMock__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ATokenMock {
    return new Contract(address, _abi, signerOrProvider) as ATokenMock;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IAaveIncentivesController",
        name: "aic",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "emission",
        type: "uint256",
      },
    ],
    name: "AssetConfigUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "AssetIndexUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "RewardsAccrued",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "UserIndexUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "_aic",
    outputs: [
      {
        internalType: "contract IAaveIncentivesController",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "cleanUserState",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getScaledUserBalanceAndSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "userBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalSupply",
        type: "uint256",
      },
    ],
    name: "handleActionOnAic",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "userBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalSupply",
        type: "uint256",
      },
    ],
    name: "setUserBalanceAndSupply",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161030138038061030183398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b610270806100916000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630afbcdc91461005c57806334743e7c14610086578063b39944ba1461009b578063b41c6f98146100a3578063f794ca51146100b8575b600080fd5b61006f61006a366004610183565b6100cb565b60405161007d92919061022c565b60405180910390f35b6100996100943660046101a4565b6100d6565b005b610099610141565b6100ab61014d565b60405161007d9190610218565b6100996100c63660046101d6565b61015c565b600154600254915091565b6000546040516318c39f1760e11b81526001600160a01b03909116906331873e2e9061010a908690869086906004016101f7565b600060405180830381600087803b15801561012457600080fd5b505af1158015610138573d6000803e3d6000fd5b50505050505050565b60006001819055600255565b6000546001600160a01b031681565b600191909155600255565b80356001600160a01b038116811461017e57600080fd5b919050565b600060208284031215610194578081fd5b61019d82610167565b9392505050565b6000806000606084860312156101b8578182fd5b6101c184610167565b95602085013595506040909401359392505050565b600080604083850312156101e8578182fd5b50508035926020909101359150565b6001600160a01b039390931683526020830191909152604082015260600190565b6001600160a01b0391909116815260200190565b91825260208201526040019056fea26469706673582212203e1369ec2be5ee708adea37057eafc13066f20c03418ee5c73a3cad33858367b64736f6c63430007050033";
