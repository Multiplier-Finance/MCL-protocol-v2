/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IConfigurableRightsPoolInterface extends ethers.utils.Interface {
  functions: {
    "bPool()": FunctionFragment;
    "createPool(uint256)": FunctionFragment;
    "joinPool(uint256,uint256[])": FunctionFragment;
    "setCap(uint256)": FunctionFragment;
    "setController(address)": FunctionFragment;
    "setPublicSwap(bool)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "bPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinPool",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicSwap",
    values: [boolean]
  ): string;

  decodeFunctionResult(functionFragment: "bPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublicSwap",
    data: BytesLike
  ): Result;

  events: {};
}

export class IConfigurableRightsPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IConfigurableRightsPoolInterface;

  functions: {
    bPool(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "bPool()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    createPool(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createPool(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    joinPool(
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "joinPool(uint256,uint256[])"(
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCap(
      newCap: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCap(uint256)"(
      newCap: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setController(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setController(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPublicSwap(
      publicSwap: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPublicSwap(bool)"(
      publicSwap: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  bPool(overrides?: CallOverrides): Promise<string>;

  "bPool()"(overrides?: CallOverrides): Promise<string>;

  createPool(
    arg0: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createPool(uint256)"(
    arg0: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  joinPool(
    poolAmountOut: BigNumberish,
    maxAmountsIn: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "joinPool(uint256,uint256[])"(
    poolAmountOut: BigNumberish,
    maxAmountsIn: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCap(
    newCap: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCap(uint256)"(
    newCap: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setController(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setController(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPublicSwap(
    publicSwap: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPublicSwap(bool)"(
    publicSwap: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    bPool(overrides?: CallOverrides): Promise<string>;

    "bPool()"(overrides?: CallOverrides): Promise<string>;

    createPool(arg0: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "createPool(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    joinPool(
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "joinPool(uint256,uint256[])"(
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setCap(newCap: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setCap(uint256)"(
      newCap: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setController(newOwner: string, overrides?: CallOverrides): Promise<void>;

    "setController(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPublicSwap(
      publicSwap: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPublicSwap(bool)"(
      publicSwap: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    bPool(overrides?: CallOverrides): Promise<BigNumber>;

    "bPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    createPool(arg0: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "createPool(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    joinPool(
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "joinPool(uint256,uint256[])"(
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCap(newCap: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setCap(uint256)"(
      newCap: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setController(newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    "setController(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPublicSwap(
      publicSwap: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPublicSwap(bool)"(
      publicSwap: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bPool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createPool(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createPool(uint256)"(
      arg0: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    joinPool(
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "joinPool(uint256,uint256[])"(
      poolAmountOut: BigNumberish,
      maxAmountsIn: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCap(
      newCap: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCap(uint256)"(
      newCap: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setController(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setController(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPublicSwap(
      publicSwap: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPublicSwap(bool)"(
      publicSwap: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
