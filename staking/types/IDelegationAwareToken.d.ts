/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IDelegationAwareTokenInterface extends ethers.utils.Interface {
  functions: {
    "delegate(address,uint8)": FunctionFragment;
    "delegateAll(address)": FunctionFragment;
    "getDelegatee(address,uint8)": FunctionFragment;
    "getPowerAtBlock(address,uint256,uint8)": FunctionFragment;
    "getPowerCurrent(address,uint8)": FunctionFragment;
    "totalSupplyAt(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "delegate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "delegateAll", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getDelegatee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPowerAtBlock",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPowerCurrent",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPowerAtBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPowerCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt",
    data: BytesLike
  ): Result;

  events: {
    "DelegateChanged(address,address,uint8)": EventFragment;
    "DelegatedPowerChanged(address,uint256,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DelegateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegatedPowerChanged"): EventFragment;
}

export class IDelegationAwareToken extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IDelegationAwareTokenInterface;

  functions: {
    delegate(
      delegatee: string,
      delegationType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "delegate(address,uint8)"(
      delegatee: string,
      delegationType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    delegateAll(
      delegatee: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "delegateAll(address)"(
      delegatee: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getDelegatee(
      delegator: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getDelegatee(address,uint8)"(
      delegator: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getPowerAtBlock(
      user: string,
      blockNumber: BigNumberish,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getPowerAtBlock(address,uint256,uint8)"(
      user: string,
      blockNumber: BigNumberish,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getPowerCurrent(
      user: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getPowerCurrent(address,uint8)"(
      user: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    totalSupplyAt(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalSupplyAt(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  delegate(
    delegatee: string,
    delegationType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "delegate(address,uint8)"(
    delegatee: string,
    delegationType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  delegateAll(
    delegatee: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "delegateAll(address)"(
    delegatee: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getDelegatee(
    delegator: string,
    delegationType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getDelegatee(address,uint8)"(
    delegator: string,
    delegationType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPowerAtBlock(
    user: string,
    blockNumber: BigNumberish,
    delegationType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPowerAtBlock(address,uint256,uint8)"(
    user: string,
    blockNumber: BigNumberish,
    delegationType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPowerCurrent(
    user: string,
    delegationType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPowerCurrent(address,uint8)"(
    user: string,
    delegationType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSupplyAt(
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalSupplyAt(uint256)"(
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    delegate(
      delegatee: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "delegate(address,uint8)"(
      delegatee: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    delegateAll(delegatee: string, overrides?: CallOverrides): Promise<void>;

    "delegateAll(address)"(
      delegatee: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getDelegatee(
      delegator: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getDelegatee(address,uint8)"(
      delegator: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPowerAtBlock(
      user: string,
      blockNumber: BigNumberish,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPowerAtBlock(address,uint256,uint8)"(
      user: string,
      blockNumber: BigNumberish,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPowerCurrent(
      user: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPowerCurrent(address,uint8)"(
      user: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupplyAt(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupplyAt(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    DelegateChanged(
      delegator: string | null,
      delegatee: string | null,
      delegationType: null
    ): EventFilter;

    DelegatedPowerChanged(
      user: string | null,
      amount: null,
      delegationType: null
    ): EventFilter;
  };

  estimateGas: {
    delegate(
      delegatee: string,
      delegationType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "delegate(address,uint8)"(
      delegatee: string,
      delegationType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    delegateAll(delegatee: string, overrides?: Overrides): Promise<BigNumber>;

    "delegateAll(address)"(
      delegatee: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getDelegatee(
      delegator: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDelegatee(address,uint8)"(
      delegator: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPowerAtBlock(
      user: string,
      blockNumber: BigNumberish,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPowerAtBlock(address,uint256,uint8)"(
      user: string,
      blockNumber: BigNumberish,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPowerCurrent(
      user: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPowerCurrent(address,uint8)"(
      user: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupplyAt(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupplyAt(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    delegate(
      delegatee: string,
      delegationType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "delegate(address,uint8)"(
      delegatee: string,
      delegationType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    delegateAll(
      delegatee: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "delegateAll(address)"(
      delegatee: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getDelegatee(
      delegator: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDelegatee(address,uint8)"(
      delegator: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPowerAtBlock(
      user: string,
      blockNumber: BigNumberish,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPowerAtBlock(address,uint256,uint8)"(
      user: string,
      blockNumber: BigNumberish,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPowerCurrent(
      user: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPowerCurrent(address,uint8)"(
      user: string,
      delegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupplyAt(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalSupplyAt(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
