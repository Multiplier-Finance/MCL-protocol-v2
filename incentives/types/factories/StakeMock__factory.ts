/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { StakeMock } from "../StakeMock";

export class StakeMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    stakedToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StakeMock> {
    return super.deploy(stakedToken, overrides || {}) as Promise<StakeMock>;
  }
  getDeployTransaction(
    stakedToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(stakedToken, overrides || {});
  }
  attach(address: string): StakeMock {
    return super.attach(address) as StakeMock;
  }
  connect(signer: Signer): StakeMock__factory {
    return super.connect(signer) as StakeMock__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StakeMock {
    return new Contract(address, _abi, signerOrProvider) as StakeMock;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "stakedToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "STAKED_TOKEN",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "claimRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "cooldown",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "redeem",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516102523803806102528339818101604052602081101561003357600080fd5b5051606081901b6001600160601b0319166080526001600160a01b03166101e761006b6000398060e8528061013952506101e76000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631e9a69501461005c578063312f6b831461008a578063787a08a6146100ae5780639a99b4f01461005c578063adc9772e146100b6575b600080fd5b6100886004803603604081101561007257600080fd5b506001600160a01b0381351690602001356100e2565b005b6100926100e6565b604080516001600160a01b039092168252519081900360200190f35b61008861010a565b610088600480360360408110156100cc57600080fd5b506001600160a01b03813516906020013561010c565b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b565b604080516323b872dd60e01b81523360048201523060248201526044810183905290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916323b872dd9160648083019260209291908290030181600087803b15801561018157600080fd5b505af1158015610195573d6000803e3d6000fd5b505050506040513d60208110156101ab57600080fd5b5050505056fea264697066735822122058a3f953daffc8fc0b13001895a3156a6557e1a8097d5033029f86f11a7e149d64736f6c63430007050033";
