/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RoleManagerInterface extends ethers.utils.Interface {
  functions: {
    "claimRoleAdmin(uint256)": FunctionFragment;
    "getAdmin(uint256)": FunctionFragment;
    "getPendingAdmin(uint256)": FunctionFragment;
    "setPendingAdmin(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimRoleAdmin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdmin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingAdmin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingAdmin",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingAdmin",
    data: BytesLike
  ): Result;

  events: {
    "PendingAdminChanged(address)": EventFragment;
    "RoleClaimed(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PendingAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleClaimed"): EventFragment;
}

export class RoleManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RoleManagerInterface;

  functions: {
    claimRoleAdmin(
      role: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimRoleAdmin(uint256)"(
      role: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAdmin(role: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "getAdmin(uint256)"(
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPendingAdmin(
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getPendingAdmin(uint256)"(
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setPendingAdmin(
      role: BigNumberish,
      newPendingAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPendingAdmin(uint256,address)"(
      role: BigNumberish,
      newPendingAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claimRoleAdmin(
    role: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimRoleAdmin(uint256)"(
    role: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAdmin(role: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "getAdmin(uint256)"(
    role: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPendingAdmin(
    role: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getPendingAdmin(uint256)"(
    role: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  setPendingAdmin(
    role: BigNumberish,
    newPendingAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPendingAdmin(uint256,address)"(
    role: BigNumberish,
    newPendingAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimRoleAdmin(
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimRoleAdmin(uint256)"(
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAdmin(role: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "getAdmin(uint256)"(
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPendingAdmin(
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getPendingAdmin(uint256)"(
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    setPendingAdmin(
      role: BigNumberish,
      newPendingAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPendingAdmin(uint256,address)"(
      role: BigNumberish,
      newPendingAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    PendingAdminChanged(
      newPendingAdmin: string | null
    ): TypedEventFilter<[string], { newPendingAdmin: string }>;

    RoleClaimed(
      newAdming: string | null,
      role: null
    ): TypedEventFilter<
      [string, BigNumber],
      { newAdming: string; role: BigNumber }
    >;
  };

  estimateGas: {
    claimRoleAdmin(
      role: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimRoleAdmin(uint256)"(
      role: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAdmin(role: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "getAdmin(uint256)"(
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingAdmin(
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPendingAdmin(uint256)"(
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPendingAdmin(
      role: BigNumberish,
      newPendingAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPendingAdmin(uint256,address)"(
      role: BigNumberish,
      newPendingAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimRoleAdmin(
      role: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimRoleAdmin(uint256)"(
      role: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAdmin(
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAdmin(uint256)"(
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingAdmin(
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPendingAdmin(uint256)"(
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPendingAdmin(
      role: BigNumberish,
      newPendingAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPendingAdmin(uint256,address)"(
      role: BigNumberish,
      newPendingAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
